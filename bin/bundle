#!/usr/bin/env ruby3.0
# frozen_string_literal: true

require 'rubygems'

m = Module.new do
  module_function

  def invoked_as_script?
    File.expand_path($PROGRAM_NAME) == File.expand_path(__FILE__)
  end

  def env_var_version
    ENV['BUNDLER_VERSION']
  end

  def cli_arg_version
    return unless invoked_as_script?
    return unless ARGV.first.to_s.start_with?('update')

    update_index = nil
    find_bundler_version(update_index)
  end

  private

  def find_bundler_version(update_index)
    ARGV.each_with_index do |arg, index|
      if update_index && update_index.succ == index && Gem::Version.correct?(arg)
        return arg
      elsif arg =~ /\A--bundler(?:[= ](#{Gem::Version::VERSION_PATTERN}))?\z/
        update_index = index
        return Regexp.last_match(1)
      end
    end

    nil
  end

  def gemfile
    gemfile = ENV['BUNDLE_GEMFILE']
    return gemfile if gemfile && !gemfile.empty?

    File.expand_path('../Gemfile', __dir__)
  end

  def lockfile
    lockfile =
      case File.basename(gemfile)
      when 'gems.rb' then gemfile.sub(/\.rb$/, '.locked')
      else "#{gemfile}.lock"
      end
    File.expand_path(lockfile)
  end

  def lockfile_version
    return unless File.file?(lockfile)

    lockfile_contents = File.read(lockfile)
    return unless lockfile_contents =~ /\n\nBUNDLED WITH\n\s{2,}(#{Gem::Version::VERSION_PATTERN})\n/

    Regexp.last_match(1)
  end

  def bundler_requirement
    @bundler_requirement ||=
      env_var_version ||
      cli_arg_version ||
      bundler_requirement_for(lockfile_version)
  end

  def bundler_requirement_for(version)
    return "#{Gem::Requirement.default}.a" unless version

    bundler_gem_version = Gem::Version.new(version)

    bundler_gem_version.approximate_recommendation
  end

  def load_bundler!
    ENV['BUNDLE_GEMFILE'] ||= gemfile

    activate_bundler
  end

  def activate_bundler
    gem_error = activation_error_handling { gem 'bundler', bundler_requirement }
    return if gem_error.nil?

    require_error = activation_error_handling { require 'bundler/version' }
    return if require_error.nil? && bundler_version_satisfied?

    display_activation_failure(gem_error)
    exit_with_error
  end

  def bundler_version_satisfied?
    Gem::Requirement.new(bundler_requirement).satisfied_by?(Gem::Version.new(Bundler::VERSION))
  end

  def display_activation_failure(gem_error)
    error_message = "Activating bundler (#{bundler_requirement}) failed:\n" \
                    "#{gem_error.message}\n\n" \
                    'To install the required version of bundler, run: ' \
                    "`gem install bundler -v '#{bundler_requirement}'`"
    warn error_message
  end

  def exit_with_error
    exit 42
  end

  def activation_error_handling
    # handle the error and return an error object or nil
    # ...
  end

  def activation_error_handling
    yield
    nil
  rescue StandardError, LoadError => e
    e
  end
end

m.load_bundler!

load Gem.bin_path('bundler', 'bundle') if m.invoked_as_script?
